pub struct NewRoundEvent {
    pub round: Round,
    pub reason: NewRoundReason,
}

pub struct ProposalInfo<T, P> {
    pub proposal: Block<T>,
    pub proposer_info: P,
    // use to notify about last committed block and the receiver could decide to start
    // a synchronization if it's behind
    pub highest_ledger_info: QuorumCert,
}

pub struct VoteMsg {
    /// The id of the proposed block.
    proposed_block_id: HashValue,
    /// The id of the state generated by the StateExecutor after executing the proposed block.
    executed_state: ExecutedState,
    /// The round of the block.
    round: Round,
    /// The identity of the voter.
    author: Author,
    /// LedgerInfo of a block that is going to be committed in case this vote gathers QC.
    ledger_info: LedgerInfo,
    /// Signature of the LedgerInfo
    signature: Signature,
}

pub struct TimeoutMsg {
    highest_quorum_certificate: QuorumCert,
    // Used for fast state synchronization.
    highest_ledger_info: QuorumCert,
    pacemaker_timeout: PacemakerTimeout,
    author: Author,
    signature: Ed25519Signature,
}

pub type Round = u64;

// Structures contained in above events:
pub enum NewRoundReason {
    QCReady,
    Timeout { cert: PacemakerTimeoutCertificate },
}

pub struct PacemakerTimeout {
    round: Round,
    author: Author,
    signature: Ed25519Signature,
}



